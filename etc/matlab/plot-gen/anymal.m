% csv format
formatSpec = '%C%C%C%d%f';

% load csv
T = readtable(...
    '../../../data/anymal-stand/sample.csv', ...
    'Delimiter', ',', ...
    'Format',formatSpec ...
    );

% constants
numIter = 50000;

% data from rai
RAI = T(T.SIM == 'RAI', :);
[RAI_G, RAI_numrows] = findgroups(RAI.NUMROW);
RAI_mins = splitapply(@min, RAI.TIME, RAI_G);

% data from bullet
BT = T(T.SIM == 'BULLET', :);
[BT_G, BT_numrows] = findgroups(BT.NUMROW);
BT_mins = splitapply(@min, BT.TIME, BT_G);

% data from dart-dantzig-bullet
DART_DAN_BT = T(...
    T.SIM == 'DART' ...
    & T.SOLVER == 'DANTZIG' ...
    & T.DETECTOR == 'BULLET', :);
[DART_DAN_BT_G, DART_DAN_BT_numrows] = findgroups(DART_DAN_BT.NUMROW);
DART_DAN_BT_mins = splitapply(...
    @min, ...
    DART_DAN_BT.TIME, ...
    DART_DAN_BT_G);

% data from dart-pgs-bullet
DART_PGS_BT = T(...
    T.SIM == 'DART' ...
    & T.SOLVER == 'PGS' ...
    & T.DETECTOR == 'BULLET', :);
[DART_PGS_BT_G, DART_PGS_BT_numrows] = findgroups(DART_PGS_BT.NUMROW);
DART_PGS_BT_mins = splitapply(...
    @min, ...
    DART_PGS_BT.TIME, ...
    DART_PGS_BT_G);

% data from dart-dantzig-ode
DART_DAN_ODE = T(...
    T.SIM == 'DART' ...
    & T.SOLVER == 'DANTZIG' ...
    & T.DETECTOR == 'ODE', :);
[DART_DAN_ODE_G, DART_DAN_ODE_numrows] = findgroups(DART_DAN_ODE.NUMROW);
DART_DAN_ODE_mins = splitapply(...
    @min, ...
    DART_DAN_ODE.TIME, ...
    DART_DAN_ODE_G);

% data from dart-pgs-ode
DART_PGS_ODE = T(...
    T.SIM == 'DART' ...
    & T.SOLVER == 'PGS' ...
    & T.DETECTOR == 'ODE', :);
[DART_PGS_ODE_G, DART_PGS_ODE_numrows] = findgroups(DART_PGS_ODE.NUMROW);
DART_PGS_ODE_mins = splitapply(...
    @min, ...
    DART_PGS_ODE.TIME, ...
    DART_PGS_ODE_G);

% data from mujoco-pgs
MJC_PGS = T(...
    T.SIM == 'MUJOCO' ...
    & T.SOLVER == 'PGS-NOSLIP', :);
[MJC_PGS_G, MJC_PGS_numrows] = findgroups(MJC_PGS.NUMROW);
MJC_PGS_mins = splitapply(...
    @min, ...
    MJC_PGS.TIME, ...
    MJC_PGS_G);

% data from mujoco-cg
MJC_CG = T(...
    T.SIM == 'MUJOCO' ...
    & T.SOLVER == 'CG-NOSLIP', :);
[MJC_CG_G, MJC_CG_numrows] = findgroups(MJC_CG.NUMROW);
MJC_CG_mins = splitapply(...
    @min, ...
    MJC_CG.TIME, ...
    MJC_CG_G);

% data from mujoco-newton
MJC_NEWTON = T(...
    T.SIM == 'MUJOCO' ...
    & T.SOLVER == 'NEWTON-NOSLIP', :);
[MJC_NEWTON_G, MJC_NEWTON_numrows] = findgroups(MJC_NEWTON.NUMROW);
MJC_NEWTON_mins = splitapply(...
    @min, ...
    MJC_NEWTON.TIME, ...
    MJC_NEWTON_G);

% data from ODE
ODE = T(T.SIM == 'ODE', :);
[ODE_G, ODE_numrows] = findgroups(ODE.NUMROW);
ODE_mins = splitapply(...
    @min, ...
    ODE.TIME, ...
    ODE_G);

%% plot 
% linear 
figure(1)
plot(RAI_numrows.^2, RAI_mins, 'g', 'DisplayName', 'Rai')
hold on 
plot(BT_numrows.^2, BT_mins, 'r', 'DisplayName', 'BtMultibody')
plot(DART_DAN_BT_numrows.^2, DART_DAN_BT_mins, '-mo', 'DisplayName', 'DartDantzig')
plot(DART_PGS_BT_numrows.^2, DART_PGS_BT_mins, '-m*', 'DisplayName', 'DartPGS')
plot(MJC_PGS_numrows.^2, MJC_PGS_mins, '-bs', 'DisplayName', 'MjcPGS')
plot(MJC_CG_numrows.^2, MJC_CG_mins, '-b*', 'DisplayName', 'MjcCG')
plot(MJC_NEWTON_numrows.^2, MJC_NEWTON_mins, '-bo', 'DisplayName', 'MjcNewton')
plot(ODE_numrows.^2, ODE_mins, 'y', 'DisplayName', 'OdeStd')
% plot(DART_DAN_ODE_numrows.^2, DART_DAN_ODE_mins, '-m.') % redundant 
% plot(DART_PGS_ODE_numrows.^2, DART_PGS_ODE_mins, '-mo') % redundant
xlabel('number of robots (n)')
ylabel('50k simulation time (sec)')
legend('Location', 'eastoutside')
title('ANYmal PD control test')
hold off

% log scale
figure(2)
plot(RAI_numrows.^2, RAI_mins, 'g', 'DisplayName', 'Rai')
hold on 
plot(BT_numrows.^2, BT_mins, 'r', 'DisplayName', 'BtMultibody')
plot(DART_DAN_BT_numrows.^2, DART_DAN_BT_mins, '-mo', 'DisplayName', 'DartDantzig')
plot(DART_PGS_BT_numrows.^2, DART_PGS_BT_mins, '-m*', 'DisplayName', 'DartPGS')
plot(MJC_PGS_numrows.^2, MJC_PGS_mins, '-bs', 'DisplayName', 'MjcPGS')
plot(MJC_CG_numrows.^2, MJC_CG_mins, '-b*', 'DisplayName', 'MjcCG')
plot(MJC_NEWTON_numrows.^2, MJC_NEWTON_mins, '-bo', 'DisplayName', 'MjcNewton')
plot(ODE_numrows.^2, ODE_mins, 'y', 'DisplayName', 'OdeStd')
% plot(DART_DAN_ODE_numrows.^2, DART_DAN_ODE_mins, '-m.') % redundant 
% plot(DART_PGS_ODE_numrows.^2, DART_PGS_ODE_mins, '-mo') % redundant
xlabel('number of robots (log n)')
ylabel('50k simulation time (log sec)')
legend('Location', 'eastoutside')
hold off
title('ANYmal PD control test (log scale)')
ylim([0, 10^4.5])
xlim([0, 10^2.5])
set(gca, 'YScale', 'log', 'XScale', 'log')

% speed bar graph (1 anymal)
c = categorical({...
    'Rai';...
    'BtMultibody';...
    'DartDantzig';...
    'DartPGS';...
    'MjcPGS';...
    'MjcCG';...
    'MjcNewton';...
    'OdeStd'
    });
values = [...
    numIter / RAI_mins(1)           / 1000; ...
    numIter / BT_mins(1)            / 1000; ...
    numIter / DART_DAN_BT_mins(1)   / 1000; ...
    numIter / DART_PGS_BT_mins(1)   / 1000; ...
    numIter / MJC_PGS_mins(1)       / 1000; ...
    numIter / MJC_CG_mins(1)        / 1000; ...
    numIter / MJC_NEWTON_mins(1)    / 1000; ...
    numIter / ODE_mins(1)           / 1000 ...
    ];

T2 = table(c, values);
T2.Properties.VariableNames = {'sim','speed'};
T2 = sortrows(T2, 2, 'descend');

T2.sim = reordercats(T2.sim,cellstr(T2.sim));

figure(3)
bar(T2.sim(1), T2.speed(1), 'g')    % rai
hold on
bar(T2.sim(2), T2.speed(2), 'r')    % bt
bar(T2.sim(3), T2.speed(3), 'm')    % dart-dantzig
bar(T2.sim(4), T2.speed(4), 'm')    % dart-pgs
bar(T2.sim(5), T2.speed(5), 'b')    % mjc-pgs
bar(T2.sim(6), T2.speed(6), 'b')    % mjc-cg
bar(T2.sim(7), T2.speed(7), 'b')    % mjc-newton
bar(T2.sim(8), T2.speed(8), 'y')    % ode
hold off
title('ANYmal PD control test (1 robot)')

% numbers on bars
text(1:length(T2.speed), ...
    T2.speed, ...
    num2str(T2.speed, '%0.2f'),...
    'vert', 'bottom', ...
    'horiz','center', ...
    'FontWeight','bold');
ylabel('timestep per second (kHz)')
ylim([0, 110])